package core

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"testing"

	"github.com/CityOfZion/neo-go/pkg/core/transaction"
	"github.com/CityOfZion/neo-go/pkg/util"
	"github.com/stretchr/testify/assert"
)

func TestDecodeBlock(t *testing.T) {
	var (
		rawBlock              = "00000000b7def681f0080262aa293071c53b41fc3146b196067243700b68acd059734fd19543108bf9ddc738cbee2ed1160f153aa0d057f062de0aa3cbb64ba88735c23d43667e59543f050095df82b02e324c5ff3812db982f3b0089a21a278988efeec6a027b2501fd450140113ac66657c2f544e8ad13905fcb2ebaadfef9502cbefb07960fbe56df098814c223dcdd3d0efa0b43a9459e654d948516dcbd8b370f50fbecfb8b411d48051a408500ce85591e516525db24065411f6a88f43de90fa9c167c2e6f5af43bc84e65e5a4bb174bc83a19b6965ff10f476b1b151ae15439a985f33916abc6822b0bb140f4aae522ffaea229987a10d01beec826c3b9a189fe02aa82680581b78f3df0ea4d3f93ca8ea35ffc90f15f7db9017f92fafd9380d9ba3237973cf4313cf626fc40e30e50e3588bd047b39f478b59323868cd50c7ab54355d8245bf0f1988d37528f9bbfc68110cf917debbdbf1f4bdd02cdcccdc3269fdf18a6c727ee54b6934d840e43918dd1ec6123550ec37a513e72b34b2c2a3baa510dec3037cbef2fa9f6ed1e7ccd1f3f6e19d4ce2c0919af55249a970c2685217f75a5589cf9e54dff8449af155210209e7fd41dfb5c2f8dc72eb30358ac100ea8c72da18847befe06eade68cebfcb9210327da12b5c40200e9f65569476bbff2218da4f32548ff43b6387ec1416a231ee821034ff5ceeac41acf22cd5ed2da17a6df4dd8358fcb2bfb1a43208ad0feaab2746b21026ce35b29147ad09e4afe4ec4a7319095f08198fa8babbe3c56e970b143528d2221038dddc06ce687677a53d54f096d2591ba2302068cf123c1f2d75c2dddc542557921039dafd8571a641058ccc832c5e2111ea39b09c0bde36050914384f7a48bce9bf92102d02b1873a0863cd042cc717da31cea0d7cf9db32b74d4c72c01b0011503e2e2257ae01000095df82b000000000"
		rawBlockHash          = "922ba0c0d06afbeec4c50b0541a29153feaa46c5d7304e7bf7f40870d9f3aeb0"
		rawBlockPrevHash      = "d14f7359d0ac680b7043720696b14631fc413bc5713029aa620208f081f6deb7"
		rawBlockIndex         = 343892
		rawBlockTimestamp     = 1501455939
		rawBlockConsensusData = 6866918707944415125
	)

	rawBlockBytes, err := hex.DecodeString(rawBlock)
	if err != nil {
		t.Fatal(err)
	}

	block := &Block{}
	if err := block.DecodeBinary(bytes.NewReader(rawBlockBytes)); err != nil {
		t.Fatal(err)
	}
	assert.Equal(t, uint32(rawBlockIndex), block.Index)
	assert.Equal(t, uint32(rawBlockTimestamp), block.Timestamp)
	assert.Equal(t, uint64(rawBlockConsensusData), block.ConsensusData)
	assert.Equal(t, rawBlockPrevHash, block.PrevHash.String())
	assert.Equal(t, rawBlockHash, block.Hash().String())
}

func TestDecodeBlockTX(t *testing.T) {
	rawBlock := "00000000a6b3a683d768d3ed25c269e84ff463e9000da69732e7b3f63c803e1af23daddbbeea59127e29fe6ba4ff14f9b1705a20c36cc53ce911a895bf583ff6545c3ad116bd9c5a04591e00cf0360cebfb4c76659e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501409b808c1770aaa0000c6a7e3717ed77742a1cbe3cc744175be0560b35308122c2b7132a3d26fd4bca01531bd2a20e807b9f5b7539a44b8cb9e9292fc55fb82fc240ec31541af4822778d76860d74d755d8a963eaa6aca62e3631522e89e48fba4dea17833f1b2dfc049cd7e8ca82416e3256aef0f1dbf163209f3c8af624123a99e40376125d534bc028e13b6a94bd9bba75be37fe6edc12566b3a8c7311d1d99caf8b3aef820f18e646561e87841dfb0870c04898b255cdd06fda4208d80ab220bb140f06ade1ea800da776ffe401444ea1db8c6f1fcf58454b85664dfd8acf477986f5cc9b7b813448c983d56642ef4bb5809439a40876ee8000806e60d96bc39fabb4075afc22334d4374d91d57af62247cbae367b60786419399c5c9d20be2b15c03a3c9e2ff2388d841e6b363d8a72babc57734c4bbe26f521375a73f74d0eac3f01f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae080000cf0360ce000000008000000121a3a8756478ff407cbf38cc4d6feac069b69ed31d7e3c56a4626ebc66f185540000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50076dd4101000000deb77c8d92782c5a5639dd89ad9dcc1bc7391dfa014140247ba27e339c8eea91b0e4ac234f7f10f05b8bdd9ab41411b612b5aa4f2d7a85ff979bb47fad1c8d8471878e225c3ad224d7aebba2c252a84ae224b363c1d90923210396fde3efff2de35457f035fe8267f9a1629880c518d273f0741e3e52e98b6cd1ac8000000171d94c9c31b86ce171248e9a57f4bcc9bc9eea1a9313d2b754bb19a3a2bc641f0100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000059b692b33e04b33efd06511705c168f5e758f4279b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5004eb69390040000c5e270aaa782280eb248ffcff70014ac90d71d120141408eca4df2284c424a585c44a98791a1185f98bfab1a87e5da447504488b6b1c11b9e0b0a7120a4b213e42938ae18b8457cedd14eb88104bc0bc12c3e725ade6ad23210332a5ed95a951eb29622f9a3c77acdcc9d26fd90acdc2993eeb678e38fc7de6e7ac8000000195a442d9e1112e25a327a512ae2785251c6465dba4ecd26a0d2d4afa11eab0c70000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500f15365000000000851bdb688e058bd185dd318b76d60cfe2c641990141401f0714153ffb9af487f62184fc81b94efdde1dae93560fd03ff3773ed64cf89024a1f6447cc935d22d80915688b665d670cd0fae4b0cfd44531f50275412fb8b2321020fb4cdb0b7426d283e578d54b3f5ab9268a4b5f9f7e7691d17fb47d191cfbcdaac80000001368392c2344242f0268dc59ee5956f09f3752a2b152c43a7ce02c87580d8b1350000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a493d600000000541cf0173bcd6cd292984e2e4caa1f8deb7121fc0141409fd69d1d10a46ae6d9079b239411a322cef35efd4389ff9cd3a848b26924d8a2327b9e3fac20f50259094c915c6efca78a488bb8c457126305621080b22f97a52321032abfc34e97842686c9b1291b82f4a843b95ff790309c21444ce531d63818bba1ac80000001ac4c92df7710d4c64cd635256ed53e5a4f3aee8f4c0d667c4ab79be88aca37bd0000049b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e1110000000059a01435a5523d5442a4a5a10859c967fb8d44419b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d000000008f9919ee48105c2e1bb84847f7ebf78ec6db6f939b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d71700000000cec5cb01794627e063ace3aafe1b7a9fe455109b9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ab904100000000631c6836fe747dad2ab4fa9fbf4631eb7785e7170141402e0c04b7754c72e43fbc42fb0539cbda6789644fbee84907313c67215f2d9c07ad8ced2d2f39867543966103790ae6282af34946b826b868a0e28fb37e958ccf2321030ab39b99d8675cd9bd90aaec37cba964297cc817078d33e508ab11f1d245c068ac80000001f72179fced1fea62f8a331e8a9f8a4258498027ee4acd9dde6e0ab73175616790000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b00000000b05b7e4ceafb6979d9812b29a1461d7b1d32ab279b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d71700000000dd927c11c87b3b1f706157f8cf5183336c26042501414026970ae14d07cace5fe26722434a58e39c2a17dcc0f97227555b71fae77f44480f76ca6e1feb08670fd47182af87e45026251ac65798a681f6d13712bb14640023210217af640e9e14c3f561d1eab5771345f8b3c8d17c68ee80141b5c38593d5679aaac8000000100753823f29972803825e7779196066896b70e421a2cc9dd3eb85149f3508a2b0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50056218300000000f6e2b2661001cbd30322d000151e40ddacd0cd5f014140f0d4cb7d6071ae81aa0a6e33d0c1cca9bed4251756363eabfffdf1b2e0eb00a0c568cb28e7ebe320bd61e42415c5d6dc0b61f1f7af7131ce3316139d15afa06c232102c2f6ccc982de1de0fb2fd3068b5cebda7e318a03edf0143a52002fce2f4af97cac"
	t.Fail()
}

// mainnet
//component=node event="block received" index=1988868 hash=aba6d4c01f77c8219a9b8e303cc86caff6b1bbe392d62b1edd3298424a2cc637 tx=8
//panic: runtime error: makeslice: len out of range
//
//goroutine 484 [running]:
//github.com/CityOfZion/neo-go/pkg/core/transaction.(*Transaction).DecodeBinary(0xc4209ee100, 0x16fa100, 0xc42131a0e0, 0x0, 0x0)
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/core/transaction/transaction.go:60 +0x188
//github.com/CityOfZion/neo-go/pkg/core.(*Block).DecodeBinary(0xc42010a790, 0x16fa100, 0xc42131a0e0, 0xe00, 0x901)
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/core/block.go:230 +0x2cf
//github.com/CityOfZion/neo-go/pkg/network.(*Message).decodePayload(0xc420474120, 0x4031288, 0xc420284048, 0x197b6e8, 0x15df7e0)
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/network/message.go:211 +0x7d3
//github.com/CityOfZion/neo-go/pkg/network.(*Message).decode(0xc420474120, 0x4031288, 0xc420284048, 0x4031288, 0xc420284048)
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/network/message.go:172 +0x215
//github.com/CityOfZion/neo-go/pkg/network.(*TCPPeer).readLoop(0xc420194680, 0xc420d6f200)
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/network/tcp_peer.go:101 +0xf5
//created by github.com/CityOfZion/neo-go/pkg/network.(*TCPPeer).run
//	/Users/anthony/go/src/github.com/CityOfZion/neo-go/pkg/network/tcp_peer.go:89 +0x79

func TestHashBlockEqualsHashHeader(t *testing.T) {
	block := newBlock(0)
	assert.Equal(t, block.Hash(), block.Header().Hash())
}

func TestBlockVerify(t *testing.T) {
	block := newBlock(
		0,
		newTX(transaction.MinerType),
		newTX(transaction.IssueType),
	)

	if !block.Verify(false) {
		t.Fatal("block should be verified")
	}

	block.Transactions = []*transaction.Transaction{
		{Type: transaction.IssueType},
		{Type: transaction.MinerType},
	}

	if block.Verify(false) {
		t.Fatal("block should not by verified")
	}

	block.Transactions = []*transaction.Transaction{
		{Type: transaction.MinerType},
		{Type: transaction.MinerType},
	}

	if block.Verify(false) {
		t.Fatal("block should not by verified")
	}
}

func newBlockBase() BlockBase {
	return BlockBase{
		Version:       0,
		PrevHash:      sha256.Sum256([]byte("a")),
		MerkleRoot:    sha256.Sum256([]byte("b")),
		Timestamp:     999,
		Index:         1,
		ConsensusData: 1111,
		NextConsensus: util.Uint160{},
		Script: &transaction.Witness{
			VerificationScript: []byte{0x0},
			InvocationScript:   []byte{0x1},
		},
	}
}
